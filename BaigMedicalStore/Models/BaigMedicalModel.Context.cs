

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace BaigMedicalStore.Models
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;


public partial class BMSEntities : DbContext
{
    public BMSEntities()
        : base("name=BMSEntities")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }

    public virtual DbSet<AspNetRole> AspNetRoles { get; set; }

    public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }

    public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }

    public virtual DbSet<AspNetUser> AspNetUsers { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<DistributorManufacturer> DistributorManufacturers { get; set; }

    public virtual DbSet<Invoice> Invoices { get; set; }

    public virtual DbSet<InvoiceDetail> InvoiceDetails { get; set; }

    public virtual DbSet<Location> Locations { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderDetail> OrderDetails { get; set; }

    public virtual DbSet<Distributor> Distributors { get; set; }

    public virtual DbSet<Manufacturer> Manufacturers { get; set; }

    public virtual DbSet<Item> Items { get; set; }


    public virtual ObjectResult<Distributor_Get_Result> Distributor_Get(string name, string company, string phone, Nullable<int> pageNumber, Nullable<int> pageSize, string orderBy, ObjectParameter totalRecords)
    {

        var nameParameter = name != null ?
            new ObjectParameter("Name", name) :
            new ObjectParameter("Name", typeof(string));


        var companyParameter = company != null ?
            new ObjectParameter("Company", company) :
            new ObjectParameter("Company", typeof(string));


        var phoneParameter = phone != null ?
            new ObjectParameter("Phone", phone) :
            new ObjectParameter("Phone", typeof(string));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("PageNumber", pageNumber) :
            new ObjectParameter("PageNumber", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        var orderByParameter = orderBy != null ?
            new ObjectParameter("OrderBy", orderBy) :
            new ObjectParameter("OrderBy", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Distributor_Get_Result>("Distributor_Get", nameParameter, companyParameter, phoneParameter, pageNumberParameter, pageSizeParameter, orderByParameter, totalRecords);
    }


    public virtual ObjectResult<Invoice_Get_Result> Invoice_Get(Nullable<System.DateTime> date, Nullable<int> invoiceNo, Nullable<int> pageNumber, Nullable<int> pageSize, string orderBy, ObjectParameter totalRecords)
    {

        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var invoiceNoParameter = invoiceNo.HasValue ?
            new ObjectParameter("InvoiceNo", invoiceNo) :
            new ObjectParameter("InvoiceNo", typeof(int));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("PageNumber", pageNumber) :
            new ObjectParameter("PageNumber", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        var orderByParameter = orderBy != null ?
            new ObjectParameter("OrderBy", orderBy) :
            new ObjectParameter("OrderBy", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Invoice_Get_Result>("Invoice_Get", dateParameter, invoiceNoParameter, pageNumberParameter, pageSizeParameter, orderByParameter, totalRecords);
    }


    public virtual ObjectResult<Manufacturer_Get_Result> Manufacturer_Get(string name, string alias, string phone, Nullable<int> pageNumber, Nullable<int> pageSize, string orderBy, ObjectParameter totalRecords)
    {

        var nameParameter = name != null ?
            new ObjectParameter("Name", name) :
            new ObjectParameter("Name", typeof(string));


        var aliasParameter = alias != null ?
            new ObjectParameter("Alias", alias) :
            new ObjectParameter("Alias", typeof(string));


        var phoneParameter = phone != null ?
            new ObjectParameter("Phone", phone) :
            new ObjectParameter("Phone", typeof(string));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("PageNumber", pageNumber) :
            new ObjectParameter("PageNumber", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        var orderByParameter = orderBy != null ?
            new ObjectParameter("OrderBy", orderBy) :
            new ObjectParameter("OrderBy", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Manufacturer_Get_Result>("Manufacturer_Get", nameParameter, aliasParameter, phoneParameter, pageNumberParameter, pageSizeParameter, orderByParameter, totalRecords);
    }


    public virtual ObjectResult<Item_Get_Result> Item_Get(string name, string barCode, string location, Nullable<int> pageNumber, Nullable<int> pageSize, string orderBy, ObjectParameter totalRecords)
    {

        var nameParameter = name != null ?
            new ObjectParameter("Name", name) :
            new ObjectParameter("Name", typeof(string));


        var barCodeParameter = barCode != null ?
            new ObjectParameter("BarCode", barCode) :
            new ObjectParameter("BarCode", typeof(string));


        var locationParameter = location != null ?
            new ObjectParameter("Location", location) :
            new ObjectParameter("Location", typeof(string));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("PageNumber", pageNumber) :
            new ObjectParameter("PageNumber", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        var orderByParameter = orderBy != null ?
            new ObjectParameter("OrderBy", orderBy) :
            new ObjectParameter("OrderBy", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Item_Get_Result>("Item_Get", nameParameter, barCodeParameter, locationParameter, pageNumberParameter, pageSizeParameter, orderByParameter, totalRecords);
    }


    public virtual ObjectResult<ReportItem_Get_Result> ReportItem_Get(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string orderBy, ObjectParameter totalRecords)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("FromDate", fromDate) :
            new ObjectParameter("FromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("ToDate", toDate) :
            new ObjectParameter("ToDate", typeof(System.DateTime));


        var orderByParameter = orderBy != null ?
            new ObjectParameter("OrderBy", orderBy) :
            new ObjectParameter("OrderBy", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportItem_Get_Result>("ReportItem_Get", fromDateParameter, toDateParameter, orderByParameter, totalRecords);
    }

}

}

